#!/usr/bin/env ruby

require "thor"
require "json"
require 'dotenv/load'
require 'active_support/all'
require 'representable'
require "pry"
require "semantic_logger"
require "net/http"

SemanticLogger.default_level = :info
SemanticLogger.add_appender(io: $stdout, formatter: :color)
SemanticLogger.add_appender(file_name: 'log.jsonl', formatter: :json)

Dir.glob(File.expand_path("../lib/**/*.rb", __dir__)).sort.each do |file|
  require file
end

class Cli < Thor  
  desc "import", "Import contentful export JSON file"
  method_option :contentful_content, type: :string, required: true, desc: "Path to contentful content JSON file"
  method_option :assets_folder, type: :string, required: true, desc: "Path to asset folder"
  method_option :content_types, type: :string, desc: "Comma-separated list of content types with optional limits (e.g., 'articles:10,categories')"
  method_option :ids, type: :string, desc: "Comma-separated list of entry IDs to import (e.g., '1RkSbh3cnuK2iCsSUig66S,2AbCdEfGhIjKlMnOpQrStUv')"
  method_option :skip, type: :numeric, default: 0, desc: "Number of entries to skip at the beginning"
  def import
    unless File.exist?(options[:contentful_content])
      exit(1)
    end

    unless Dir.exist?(options[:assets_folder])
      exit(1)
    end

    content_types = {}
    if options[:content_types]
      options[:content_types].split(",").each do |type|
        name, limit = type.split(":")
        content_types[name] = limit ? limit.to_i : nil
      end
    end

    ids = options[:ids] ? options[:ids].split(",") : []
    skip = options[:skip]
    logger = SemanticLogger['strapi_lift']

    begin
      contentful_data = JSON.parse(File.read(options[:contentful_content])).deep_transform_keys { |key| key.to_s.underscore }
      $entries_data = contentful_data.fetch("entries")
      $assets_data = contentful_data.fetch("assets")
      $assets_folder = options[:assets_folder]

      logger.info("Starting import process...")
      EntriesImporter.new.run($entries_data, content_types, ids, skip: skip)
      logger.info("Import process completed successfully.")
    rescue JSON::ParserError => e
      logger.error("Error parsing contentful content JSON", message: e.message)
      exit(1)
    end
  end

  desc "reset", "Deletes all content from strapi"
  def reset
    logger = SemanticLogger['strapi_lift']

    logger.info("Starting reset process...")
    Contentful::Article.reset_strapi!
    Contentful::Category.reset_strapi!
    Contentful::ImageGallery.reset_strapi!
    Contentful::ImageGalleryTag.reset_strapi!
    Contentful::Homepage.reset_strapi!
    Contentful::Teaser.reset_strapi!
    Contentful::Author.reset_strapi!
    Contentful::Asset.reset_strapi!
    logger.info("Reset process completed successfully.")
  end

  desc "fix-assets", "Fix assets by ensuring all files are valid and downloading missing ones"
  method_option :contentful_content, type: :string, required: true, desc: "Path to contentful content JSON file"
  method_option :assets_folder, type: :string, required: true, desc: "Path to asset folder"
  def fix_assets
    unless File.exist?(options[:contentful_content])
      logger.error("Contentful content file not found", path: options[:contentful_content])
      exit(1)
    end

    unless Dir.exist?(options[:assets_folder])
      logger.error("Assets folder not found", path: options[:assets_folder])
      exit(1)
    end

    logger = SemanticLogger['strapi_lift']

    begin
      contentful_data = JSON.parse(File.read(options[:contentful_content])).deep_transform_keys { |key| key.to_s.underscore }
      assets_data = contentful_data.fetch("assets")
      $assets_folder = options[:assets_folder]

      logger.info("Starting asset validation process...")

      assets_data.each do |asset_data|
        asset = Contentful::Asset.new
        Contentful::AssetRepresenter.new(asset).from_hash(asset_data)

        unless asset.file_exists?
          logger.error("Asset #{asset.path} does not exist.")
          next
        end

        if asset.file_empty?
          logger.warn("Asset #{asset.path} is empty. Attempting download.")
          asset.download_file!
        end
      end

      logger.info("Asset validation process completed successfully.")
    rescue JSON::ParserError => e
      logger.error("Error parsing contentful content JSON", message: e.message)
      exit(1)
    end
  end
end

Cli.start(ARGV)
