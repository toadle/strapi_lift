#!/usr/bin/env ruby

require "thor"
require "json"
require 'dotenv/load'
require 'active_support/all'
require 'representable'
require "pry"
require "rainbow" # For colorized output
require "logger"  # For standard logging

$logger = Logger.new(STDOUT)
$logger.level = Logger::INFO

def $logger.log_progress(message, classname, log_level = :info, title = "")
  log_level_color = case log_level.to_sym.downcase
                    when :info then :green
                    when :warn then :yellow
                    when :error then :red
                    else :white
                    end

  classname_color = :blue

  title_part = title.nil? || title.empty? ? "" : "#{Rainbow(title).color(:gray)}: "

  puts "#{Rainbow("[#{log_level.upcase}]").color(log_level_color)} " \
       "#{Rainbow(classname).color(classname_color)} " \
       "#{title_part}#{message}"
end

Dir.glob(File.expand_path("../lib/**/*.rb", __dir__)).sort.each do |file|
  require file
end

class Cli < Thor
  desc "import", "Import contentful export JSON file"
  method_option :contentful_content, type: :string, required: true, desc: "Path to contentful content JSON file"
  method_option :assets_folder, type: :string, required: true, desc: "Path to asset folder"
  def import
    unless File.exist?(options[:contentful_content])
      exit(1)
    end

    unless Dir.exist?(options[:assets_folder])
      exit(1)
    end

    begin
      contentful_data = JSON.parse(File.read(options[:contentful_content])).deep_transform_keys { |key| key.to_s.underscore }
      $entries_data = contentful_data.fetch("entries")
      $assets_data = contentful_data.fetch("assets")
      $assets_folder = options[:assets_folder]

      $logger.info("Starting import process...")
      EntriesImporter.new.run($entries_data)
      $logger.info("Import process completed successfully.")
    rescue JSON::ParserError => e
      $logger.special_log("error", "Cli", "Import", "Error parsing contentful content JSON: #{e.message}")
      exit(1)
    end
  end

  desc "reset", "Deletes all content from strapi"
  def reset
    $logger.info("Starting reset process...")
    Contentful::Article.reset_strapi!
    Contentful::Category.reset_strapi!
    Contentful::ImageGallery.reset_strapi!
    Contentful::ImageGalleryTag.reset_strapi!
    Contentful::Homepage.reset_strapi!
    Contentful::Teaser.reset_strapi!
    Contentful::Author.reset_strapi!
    Contentful::Asset.reset_strapi!
    $logger.info("Reset process completed successfully.")
  end
end

Cli.start(ARGV)